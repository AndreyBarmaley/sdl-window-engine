cmake_minimum_required(VERSION 3.14)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED True)

option(SWE_SDL12 "switch to SDL12" OFF)
option(SWE_WITH_JSON "add json format support" ON)
option(SWE_WITH_LUA "add lua support" OFF)
option(SWE_DLOPEN "add load shared libs support, with -ldl" ON)
option(SWE_WITH_XML "add tinyxml2 support" OFF)
option(WITH_ICONV "usage iconv for Tools::stringEncode" OFF)
option(SWE_DISABLE_AUDIO "disable library SDL_mixer" OFF)
option(SWE_DISABLE_IMAGE "disable library SDL_image" OFF)
option(SWE_DISABLE_TTF "disable library SDL_ttf" OFF)
option(SWE_DISABLE_NETWORK "disable library SDL_net" ON)
option(SWE_DISABLE_TERMGUI "disable build termwin_gui" ON)
option(SWE_DEBUG_SCENE "scene debug hotkeys" OFF)
option(SWE_DEBUG_MESSAGES "DEBUG messages" ON)
option(SWE_STACKTRACE "stack trace on exception" ON)

INCLUDE(FindPkgConfig)

set(CMAKE_FIND_FRAMEWORK LAST)

if(SWE_SDL12)
    pkg_search_module(SDL REQUIRED SDL>=1.2)

    add_compile_options(-DSWE_SDL12)
    include_directories(SYSTEM /usr/include/SDL)
    link_libraries(SDL)

    if(SWE_DISABLE_AUDIO)
    	add_compile_options(-DSWE_DISABLE_AUDIO)
    else()
	pkg_search_module(SDLMIXER REQUIRED SDL_mixer>=1.2)
	link_libraries(SDL_mixer)
    endif()
    if(SWE_DISABLE_IMAGE)
    	add_compile_options(-DSWE_DISABLE_IMAGE)
    else()
	pkg_search_module(SDLIMAGE REQUIRED SDL_image>=1.2)
	link_libraries(SDL_image)
    endif()
    if(SWE_DISABLE_TTF)
	add_compile_options(-DSWE_DISABLE_TTF)
    else()
	pkg_search_module(SDLTTF REQUIRED SDL_ttf>=1.2)
	link_libraries(SDL_ttf)
    endif()
    if(SWE_DISABLE_NETWORK)
	add_compile_options(-DSWE_DISABLE_NETWORK)
    else()
	pkg_search_module(SDLNET REQUIRED SDL_net>=1.2)
	link_libraries(SDL_net)
    endif()
else()
    pkg_search_module(SDL REQUIRED SDL2>=2.0.1)

    include_directories(SYSTEM /usr/include/SDL2)
    link_libraries(SDL2)

    if(SWE_DISABLE_AUDIO)
    	add_compile_options(-DSWE_DISABLE_AUDIO)
    else()
	pkg_search_module(SDLMIXER REQUIRED SDL2_mixer>=2.0.1)
	link_libraries(SDL2_mixer)
    endif()
    if(SWE_DISABLE_IMAGE)
    	add_compile_options(-DSWE_DISABLE_IMAGE)
    else()
	pkg_search_module(SDLIMAGE REQUIRED SDL2_image>=2.0.1)
	link_libraries(SDL2_image)
    endif()
    if(SWE_DISABLE_TTF)
	add_compile_options(-DSWE_DISABLE_TTF)
    else()
	pkg_search_module(SDLTTF REQUIRED SDL2_ttf>=2.0.1)
	link_libraries(SDL2_ttf)
    endif()
    if(SWE_DISABLE_NETWORK)
	add_compile_options(-DSWE_DISABLE_NETWORK)
    else()
	pkg_search_module(SDLNET REQUIRED SDL2_net>=2.0.1)
	link_libraries(SDL2_net)
    endif()
endif()

link_libraries(z)

if(SWE_DLOPEN)
    link_libraries(dl)
endif()

if(SWE_DISABLE_TERMGUI)
    add_compile_options(-DSWE_DISABLE_TERMGUI)
endif()

if(SWE_DEBUG_MESSAGES)
    add_compile_options(-DSWE_DEBUG_MESSAGES)
endif()

if(SWE_DEBUG_SCENE)
    add_compile_options(-DSWE_DEBUG_SCENE)
endif()

if(SWE_WITH_JSON)
    add_compile_options(-DSWE_WITH_JSON)
endif()

if(SWE_WITH_LUA)
    add_compile_options(-DSWE_WITH_LUA)
endif()

if(SWE_WITH_XML)
    add_compile_options(-DSWE_WITH_XML)
endif()

if(SWE_STACKTRACE)
    pkg_search_module(BOOST_STACKTRACE REQUIRED boost_stacktrace)
    pkg_check_modules(BOOST_STACKTRACE boost_stacktrace)
    add_compile_options(${BOOST_STACKTRACE_CFLAGS})
    link_libraries(${BOOST_STACKTRACE_LIBRARIES})
endif()
