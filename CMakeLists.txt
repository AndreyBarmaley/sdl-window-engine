cmake_minimum_required(VERSION 3.14)

project(SDL_WINDOW_ENGINE VERSION 20201010.1)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -ggdb3 -O0 -Wall -Werror -Wno-sign-compare -fsigned-char")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -Wall -Wno-sign-compare -fsigned-char")

option(SWE_SDL12 "switch to SDL12" OFF)
option(SWE_WITH_JSON "add json format support" ON)
option(SWE_WITH_LUA "add lua support" ON)
option(SWE_WITH_ICONV "add encode string support" OFF)
option(SWE_DLOPEN "add load shared libs support, with -ldl" ON)
option(SWE_EXAMPLES "build examples" ON)
option(SWE_DISABLE_AUDIO "disable library SDL_mixer" OFF)
option(SWE_DISABLE_IMAGE "disable library SDL_image" OFF)
option(SWE_DISABLE_TTF "disable library SDL_ttf" OFF)
option(SWE_DISABLE_NETWORK "disable library SDL_net" ON)
option(SWE_DISABLE_TERMGUI "disable build termwin_gui" ON)
option(SWE_DEBUG_SCENE "scene debug hotkeys: (Shift+F8) - highlight windows regions, (Shift+F9) - dump scene to console, (Shift+F10) - dump scene to json" OFF)
option(SWE_DEBUG_MESSAGES "DEBUG messages" ON)

INCLUDE(FindPkgConfig)

set(CMAKE_FIND_FRAMEWORK LAST)

set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_STATIC_RUNTIME OFF)

FIND_PACKAGE(Boost 1.62 OPTIONAL_COMPONENTS stacktrace_addr2line)

if(Boost_STACKTRACE_ADDR2LINE_FOUND)
    option(SWE_STACKTRACE "boost stacktrace on exception" ON)
endif()

if(SWE_STACKTRACE)
    add_compile_options(${Boost_STACKTRACE_ADDR2LINE_CFLAGS})
    link_libraries(${Boost_STACKTRACE_ADDR2LINE_LIBRARIES})
endif()

if(SWE_DEBUG)
    set(SWE_DEBUG_SCENE ON CACHE BOOL "enable scene debug hotkeys" FORCE)
    set(SWE_DEBUG_MESSAGES ON CACHE BOOL "enable debug messages" FORCE)
endif()

if(SWE_EXAMPLES)
    set(SWE_DISABLE_TERMGUI OFF CACHE BOOL "enable build termwin_gui" FORCE)
    set(SWE_WITH_JSON ON CACHE BOOL "enable builtin json" FORCE)
endif()

if(SWE_SDL12)
    pkg_search_module(SDL REQUIRED SDL>=1.2)

    add_compile_options(-DSWE_SDL12)
    include_directories(SYSTEM /usr/include/SDL)
    link_libraries(SDL)
    link_libraries(X11)

    if(SWE_DISABLE_AUDIO)
        add_compile_options(-DSWE_DISABLE_AUDIO)
    else()
        pkg_search_module(SDLMIXER REQUIRED SDL_mixer>=1.2)
        link_libraries(SDL_mixer)
    endif()
    if(SWE_DISABLE_IMAGE)
        add_compile_options(-DSWE_DISABLE_IMAGE)
    else()
        pkg_search_module(SDLIMAGE REQUIRED SDL_image>=1.2)
        link_libraries(SDL_image)
    endif()
    if(SWE_DISABLE_TTF)
        add_compile_options(-DSWE_DISABLE_TTF)
    else()
        pkg_search_module(SDLTTF REQUIRED SDL_ttf>=1.2)
        link_libraries(SDL_ttf)
    endif()
    if(SWE_DISABLE_NETWORK)
        add_compile_options(-DSWE_DISABLE_NETWORK)
    else()
        pkg_search_module(SDLNET REQUIRED SDL_net>=1.2)
        link_libraries(SDL_net)
    endif()
else()
    pkg_search_module(SDL REQUIRED sdl2>=2.0.1)

    include_directories(SYSTEM /usr/include/SDL2)
    link_libraries(SDL2)

    if(SWE_DISABLE_AUDIO)
        add_compile_options(-DSWE_DISABLE_AUDIO)
    else()
        pkg_search_module(SDLMIXER REQUIRED SDL2_mixer>=2.0.1)
        link_libraries(SDL2_mixer)
    endif()
    if(SWE_DISABLE_IMAGE)
        add_compile_options(-DSWE_DISABLE_IMAGE)
    else()
        pkg_search_module(SDLIMAGE REQUIRED SDL2_image>=2.0.1)
        link_libraries(SDL2_image)
    endif()
    if(SWE_DISABLE_TTF)
        add_compile_options(-DSWE_DISABLE_TTF)
    else()
        pkg_search_module(SDLTTF REQUIRED SDL2_ttf>=2.0.1)
        link_libraries(SDL2_ttf)
    endif()
    if(SWE_DISABLE_NETWORK)
        add_compile_options(-DSWE_DISABLE_NETWORK)
    else()
        pkg_search_module(SDLNET REQUIRED SDL2_net>=2.0.1)
        link_libraries(SDL2_net)
    endif()
endif()

link_libraries(z)

if(SWE_DLOPEN)
    link_libraries(dl)
endif()

if(SWE_DISABLE_TERMGUI)
    add_compile_options(-DSWE_DISABLE_TERMGUI)
endif()

if(SWE_DEBUG_MESSAGES)
    add_compile_options(-DSWE_DEBUG_MESSAGES)
endif()

if(SWE_DEBUG_SCENE)
    add_compile_options(-DSWE_DEBUG_SCENE)
endif()

if(SWE_WITH_JSON)
    add_compile_options(-DSWE_WITH_JSON)
endif()

if(SWE_SDL12)
    pkg_search_module(PNG REQUIRED libpng)
    link_libraries(png)
endif()

if(SWE_WITH_XML)
    add_compile_options(-DSWE_WITH_XML)
endif()

include_directories(.)

add_library(libswe STATIC)
add_subdirectory(swe)

set_target_properties(libswe PROPERTIES PREFIX "")
set_target_properties(libswe PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

if(SWE_EXAMPLES)
    add_subdirectory(examples)
endif()

if(SWE_WITH_LUA)
    pkg_search_module(LUA QUIET lua)

    if(LUA_VERSION VERSION_LESS 5.2)
	include_directories(lua/party/lua52/src)
	set(SWE_WITH_LUA52 ON)
    endif()

    add_compile_options(-DSWE_WITH_LUA)
    add_subdirectory(lua)
endif()
