cmake_minimum_required(VERSION 3.14)

if(SWE_WITH_JSON)
    target_sources(libswe PUBLIC jsmn/jsmn.cpp)
endif()

if(SWE_SDL12)
    if(NOT SWE_DISABLE_IMAGE)
	target_sources(libswe PUBLIC savepng/IMG_savepng.cpp)
    endif()
else()
    target_sources(libswe PUBLIC rotozoom2/SDL2_rotozoom.cpp)
endif()

target_sources(libswe PUBLIC swe_binarybuf.cpp)
target_sources(libswe PUBLIC swe_colors.cpp)
target_sources(libswe PUBLIC swe_cstring.cpp)
target_sources(libswe PUBLIC swe_cunicode_color.cpp)
target_sources(libswe PUBLIC swe_cunicode.cpp)
target_sources(libswe PUBLIC swe_display.cpp)
target_sources(libswe PUBLIC swe_display_scene.cpp)
target_sources(libswe PUBLIC swe_engine.cpp)
target_sources(libswe PUBLIC swe_events.cpp)
target_sources(libswe PUBLIC swe_fontset.cpp)
target_sources(libswe PUBLIC swe_inputs_keys.cpp)
target_sources(libswe PUBLIC swe_json.cpp)
target_sources(libswe PUBLIC swe_json_ext.cpp)
target_sources(libswe PUBLIC swe_lua.cpp)
target_sources(libswe PUBLIC swe_music.cpp)
target_sources(libswe PUBLIC swe_object.cpp)
target_sources(libswe PUBLIC swe_rect.cpp)
target_sources(libswe PUBLIC swe_serialize.cpp)
target_sources(libswe PUBLIC swe_streambuf.cpp)
target_sources(libswe PUBLIC swe_streamfile.cpp)
target_sources(libswe PUBLIC swe_streamnet.cpp)
target_sources(libswe PUBLIC swe_surface.cpp)
target_sources(libswe PUBLIC swe_surface_texture.cpp)
target_sources(libswe PUBLIC swe_systems.cpp)
target_sources(libswe PUBLIC swe_termgui.cpp)
target_sources(libswe PUBLIC swe_termwin.cpp)
target_sources(libswe PUBLIC swe_tools.cpp)
target_sources(libswe PUBLIC swe_translations.cpp)
target_sources(libswe PUBLIC swe_window.cpp)
target_sources(libswe PUBLIC swe_wingui_button.cpp)
target_sources(libswe PUBLIC swe_wingui.cpp)
target_sources(libswe PUBLIC swe_wingui_input.cpp)
target_sources(libswe PUBLIC swe_wingui_list.cpp)
target_sources(libswe PUBLIC swe_wingui_scroll.cpp)
